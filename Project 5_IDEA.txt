// Project 5
// CS 2413 Data Structures
// Spring 2023

// Code generated for input 1 would be:
// if(expression1)
// {
// 	statement1;
// }
// else
// {
// 	statement2;
// }

#include <iostream>
#include <string> // for the fields in the class
#include <vector> // for the flowchart structures
#include <stack>  // for conversion

using namespace std;

// class to store node information
class Node
{
private:
    int nodeNumber;    // to store the node number
    string type;       // can either be START, END, IF, BLOCK
    string textWithin; // can be expression or statement - for START and END this will be empty string

public:
    // constructors
    Node();
    Node(int nodeNum, string nodeType, string text);

    // getters
    int getNodeNumber() const;
    string getType() const;
    string getTextWithin() const;
};

Node::Node() {}

Node::Node(int nodeNum, string nodeType, string text)
{
    nodeNumber = nodeNum;
    type = nodeType;
    textWithin = text;
}

int Node::getNodeNumber() const
{
    return nodeNumber;
}

string Node::getType() const
{
    return type;
}

string Node::getTextWithin() const
{
    return textWithin;
}

// function to convert the given flowchart to generate code
void convertFlowChart(vector<Node> allNodes, vector<vector<int>> adjList)
{
    // TODO: use stack (no recursion) to convert the flowchart into psuedo code
    stack<int> flowStack;
    vector<bool> visited(allNodes.size(), false);
    flowStack.push(0);

    cout << allNodes[0].getTextWithin() << endl;
    cout << "if (" << allNodes[1].getTextWithin() << ")" << endl;
    cout << "{" << endl;

    while (!flowStack.empty())
    {
        int current = flowStack.top();
        flowStack.pop();
        visited[current] = true;

        if (allNodes[current].getType() == "BLOCK")
        {
            cout << allNodes[current].getTextWithin() << ";" << endl;
        }
        else if (allNodes[current].getType() == "IF")
        {
            flowStack.push(adjList[current][1]);
            flowStack.push(adjList[current][0]);

            cout << "if (" << allNodes[adjList[current][0]].getTextWithin() << ")" << endl;
            cout << "{" << endl;
        }
        else if (allNodes[current].getType() == "END")
        {
            cout << "}" << endl;
        }
    }

    cout << allNodes.back().getTextWithin() << endl;
}

int main()
{
    int numNodesInFlowChart; // number of nodes in the flow chart

    cin >> numNodesInFlowChart;
    cout << "Number of nodes: " << numNodesInFlowChart << endl;

    // Node objects array to store all the information
    vector<Node> allNodes;
    allNodes.reserve(numNodesInFlowChart);

    // read in the information about the nodes and store it in allNodes
    for (int i = 0; i < numNodesInFlowChart; i++)
    {
        int nodeNumber;
        string nodeType;
        string nodeText;

        cin >> nodeNumber >> nodeType;

        if (nodeType == "START" || nodeType == "END")
        {
            allNodes.emplace_back(nodeNumber, nodeType,
